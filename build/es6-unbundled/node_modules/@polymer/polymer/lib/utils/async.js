import"./boot.js";let microtaskCurrHandle=0,microtaskLastHandle=0,microtaskCallbacks=[],microtaskNodeContent=0,microtaskNode=document.createTextNode("");new window.MutationObserver(microtaskFlush).observe(microtaskNode,{characterData:!0});function microtaskFlush(){const a=microtaskCallbacks.length;for(let b,c=0;c<a;c++)if(b=microtaskCallbacks[c],b)try{b()}catch(a){setTimeout(()=>{throw a})}microtaskCallbacks.splice(0,a),microtaskLastHandle+=a}export const timeOut={after(a){return{run(b){return window.setTimeout(b,a)},cancel(a){window.clearTimeout(a)}}},run(a,b){return window.setTimeout(a,b)},cancel(a){window.clearTimeout(a)}};export const animationFrame={run(a){return window.requestAnimationFrame(a)},cancel(a){window.cancelAnimationFrame(a)}};export const idlePeriod={run(a){return window.requestIdleCallback?window.requestIdleCallback(a):window.setTimeout(a,16)},cancel(a){window.cancelIdleCallback?window.cancelIdleCallback(a):window.clearTimeout(a)}};export const microTask={run(a){return microtaskNode.textContent=microtaskNodeContent++,microtaskCallbacks.push(a),microtaskCurrHandle++},cancel(a){const b=a-microtaskLastHandle;if(0<=b){if(!microtaskCallbacks[b])throw new Error("invalid async handle: "+a);microtaskCallbacks[b]=null}}};