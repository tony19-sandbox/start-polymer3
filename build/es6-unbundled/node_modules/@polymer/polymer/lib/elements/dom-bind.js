import"../utils/boot.js";import{PropertyEffects}from"../mixins/property-effects.js";import{OptionalMutableData}from"../mixins/mutable-data.js";import{GestureEventListeners}from"../mixins/gesture-event-listeners.js";const domBindBase=GestureEventListeners(OptionalMutableData(PropertyEffects(HTMLElement)));class DomBind extends domBindBase{static get observedAttributes(){return["mutable-data"]}constructor(){super(),this.root=null,this.$=null,this.__children=null}attributeChangedCallback(){this.mutableData=!0}connectedCallback(){this.style.display="none",this.render()}disconnectedCallback(){this.__removeChildren()}__insertChildren(){this.parentNode.insertBefore(this.root,this)}__removeChildren(){if(this.__children)for(let a=0;a<this.__children.length;a++)this.root.appendChild(this.__children[a])}render(){let a;if(!this.__children){if(a=a||this.querySelector("template"),!a){let b=new MutationObserver(()=>{if(a=this.querySelector("template"),a)b.disconnect(),this.render();else throw new Error("dom-bind requires a <template> child")});return void b.observe(this,{childList:!0})}this.root=this._stampTemplate(a),this.$=this.root.$,this.__children=[];for(let a=this.root.firstChild;a;a=a.nextSibling)this.__children[this.__children.length]=a;this._enableProperties()}this.__insertChildren(),this.dispatchEvent(new CustomEvent("dom-change",{bubbles:!0,composed:!0}))}}customElements.define("dom-bind",DomBind);export{DomBind};