import"../utils/boot.js";import{dedupingMixin}from"../utils/mixin.js";import{PropertiesChanged}from"./properties-changed.js";function normalizeProperties(a){const b={};for(let c in a){const d=a[c];b[c]="function"===typeof d?{type:d}:d}return b}export const PropertiesMixin=dedupingMixin(a=>{function b(a){const b=Object.getPrototypeOf(a);return b.prototype instanceof e?b:null}function c(a){if(!a.hasOwnProperty(JSCompiler_renameProperty("__ownProperties",a))){let b=null;a.hasOwnProperty(JSCompiler_renameProperty("properties",a))&&a.properties&&(b=normalizeProperties(a.properties)),a.__ownProperties=b}return a.__ownProperties}const d=PropertiesChanged(a);class e extends d{static get observedAttributes(){const a=this._properties;return a?Object.keys(a).map(a=>this.attributeNameForProperty(a)):[]}static finalize(){if(!this.hasOwnProperty(JSCompiler_renameProperty("__finalized",this))){const a=b(this);a&&a.finalize(),this.__finalized=!0,this._finalizeClass()}}static _finalizeClass(){const a=c(this);a&&this.createProperties(a)}static get _properties(){if(!this.hasOwnProperty(JSCompiler_renameProperty("__properties",this))){const a=b(this);this.__properties=Object.assign({},a&&a._properties,c(this))}return this.__properties}static typeForProperty(a){const b=this._properties[a];return b&&b.type}_initializeProperties(){this.constructor.finalize(),super._initializeProperties()}connectedCallback(){super.connectedCallback&&super.connectedCallback(),this._enableProperties()}disconnectedCallback(){super.disconnectedCallback&&super.disconnectedCallback()}}return e});