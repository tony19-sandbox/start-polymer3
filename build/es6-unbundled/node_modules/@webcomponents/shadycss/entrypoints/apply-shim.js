"use strict";import ApplyShim from"../src/apply-shim.js";import templateMap from"../src/template-map.js";import{getIsExtends,toCssText}from"../src/style-util.js";import*as ApplyShimUtils from"../src/apply-shim-utils.js";import documentWait from"../src/document-wait.js";import{getComputedStyleValue,updateNativeProperties}from"../src/common-utils.js";import{CustomStyleInterfaceInterface}from"../src/custom-style-interface.js";import{nativeCssVariables,nativeShadow}from"../src/style-settings.js";const applyShim=new ApplyShim;class ApplyShimInterface{constructor(){this.customStyleInterface=null,documentWait(()=>{this.ensure()}),applyShim.invalidCallback=ApplyShimUtils.invalidate}ensure(){this.customStyleInterface||(this.customStyleInterface=window.ShadyCSS.CustomStyleInterface,this.customStyleInterface&&(this.customStyleInterface.transformCallback=a=>{applyShim.transformCustomStyle(a)},this.customStyleInterface.validateCallback=()=>{requestAnimationFrame(()=>{this.customStyleInterface.enqueued&&this.flushCustomStyles()})}))}prepareTemplate(a,b){this.ensure(),templateMap[b]=a;let c=applyShim.transformTemplate(a,b);a._styleAst=c}flushCustomStyles(){if(this.ensure(),!!this.customStyleInterface){let a=this.customStyleInterface.processStyles();if(this.customStyleInterface.enqueued){for(let b=0;b<a.length;b++){let c=a[b],d=this.customStyleInterface.getStyleForCustomStyle(c);d&&applyShim.transformCustomStyle(d)}this.customStyleInterface.enqueued=!1}}}styleSubtree(a,b){if(this.ensure(),b&&updateNativeProperties(a,b),a.shadowRoot){this.styleElement(a);let b=a.shadowRoot.children||a.shadowRoot.childNodes;for(let a=0;a<b.length;a++)this.styleSubtree(b[a])}else{let b=a.children||a.childNodes;for(let a=0;a<b.length;a++)this.styleSubtree(b[a])}}styleElement(a){this.ensure();let{is:b}=getIsExtends(a),c=templateMap[b];if(c&&!ApplyShimUtils.templateIsValid(c)){ApplyShimUtils.templateIsValidating(c)||(this.prepareTemplate(c,b),ApplyShimUtils.startValidatingTemplate(c));let d=a.shadowRoot;if(d){let a=d.querySelector("style");a&&(a.__cssRules=c._styleAst,a.textContent=toCssText(c._styleAst))}}}styleDocument(a){this.ensure(),this.styleSubtree(document.body,a)}}if(!window.ShadyCSS||!window.ShadyCSS.ScopingShim){const a=new ApplyShimInterface;let b=window.ShadyCSS&&window.ShadyCSS.CustomStyleInterface;window.ShadyCSS={prepareTemplate(b,c){a.flushCustomStyles(),a.prepareTemplate(b,c)},styleSubtree(b,c){a.flushCustomStyles(),a.styleSubtree(b,c)},styleElement(b){a.flushCustomStyles(),a.styleElement(b)},styleDocument(b){a.flushCustomStyles(),a.styleDocument(b)},getComputedStyleValue(a,b){return getComputedStyleValue(a,b)},nativeCss:nativeCssVariables,nativeShadow:nativeShadow},b&&(window.ShadyCSS.CustomStyleInterface=b)}window.ShadyCSS.ApplyShim=applyShim;